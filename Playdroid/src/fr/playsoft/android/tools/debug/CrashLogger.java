package fr.playsoft.android.tools.debug;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.lang.Thread.UncaughtExceptionHandler;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Date;

/**
 * Utility class that reports crashes to external server. Uses unique app ids
 * generated by http://figaro.push.yagasp.com/app/push_test/crash_register.php
 * 
 * @author Olgierd Uzieblo
 */
public class CrashLogger
{
	/** URL of crash server **/
	private static final String CRASH_SERVER_URL = "http://figaro.push.yagasp.com/service/device/crash/appid/";
	
	/** Tag for LogCat **/
	private static final String TAG = "CrashLogger";
	
	/** Real URL used during connecting with crash server **/
	private static String sRealConnectionURL;
	
	/** Flag to check if we are initialized **/
	private static boolean sIsInitialized;
	
	/**
	 * Initializes CrashLogger. There is nothing else to do here.
	 * 
	 * @param pAppId
	 *            App id to be used by this build. The id should be generated by http://figaro.push.yagasp.com/app/push_test/crash_register.php
	 */
	public static void init( int pAppId )
	{
		if ( sIsInitialized )
		{
			return;
		}
		
		sIsInitialized = true;
		sRealConnectionURL = CRASH_SERVER_URL + pAppId;
		Thread.setDefaultUncaughtExceptionHandler( new UncaughtExceptionHandler()
		{
			@Override
			public void uncaughtException( final Thread thread , final Throwable ex )
			{
				Thread lSendingThread = new Thread( new Runnable()
				{
					@Override
					public void run()
					{
						Log.v( TAG , "Creating crash log...." );
						String lDate = "Crashed on: " + ( new Date( System.currentTimeMillis() ) ).toLocaleString();
						String lManufacturer = "Manufacturer: " + android.os.Build.MANUFACTURER;
						String lModel = "Model: " + android.os.Build.MODEL;
						String lSDKVersion = "SDK version: " + android.os.Build.VERSION.SDK_INT;
						ByteArrayOutputStream lOutDataStream = new ByteArrayOutputStream();
						PrintStream lStackStream = new PrintStream( lOutDataStream );
						lStackStream.println( lDate );
						lStackStream.println( lManufacturer );
						lStackStream.println( lModel );
						lStackStream.println( lSDKVersion );
						ex.printStackTrace( lStackStream );
						lStackStream.close();
						byte[] lFullLog = lOutDataStream.toByteArray();
						Log.v( TAG , "Created log: " + new String( lFullLog ) );
						try
						{
							String content = "";
							content += "data" + "=" + URLEncoder.encode( new String( lFullLog ) , "UTF-8" );
							
							// Start the connection!
							HttpURLConnection conn = (HttpURLConnection) new URL( sRealConnectionURL ).openConnection();
							conn.setRequestMethod( "POST" );
							conn.setDoOutput( true );
							conn.setDoInput( true );
							
							DataOutputStream out = new DataOutputStream( conn.getOutputStream() );
							out.writeBytes( content );
							out.flush();
							out.close();
							
							InputStream lResult = conn.getInputStream();
							lResult.close();
							Log.v( TAG , "Finished sending crash log" );
						}
						catch( Exception e )
						{
							Log.e( TAG , "Exception in sending." , e );
						}
						Log.v( TAG , "Killing the app..." );
						android.os.Process.killProcess( android.os.Process.myPid() );
					}
				} );
				lSendingThread.start();
			}
		} );
	}
}
